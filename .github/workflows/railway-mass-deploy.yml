name: Railway Mass Deployment

on:
  workflow_dispatch:
    inputs:
      practice_id:
        description: 'Practice ID (e.g., advanced-spine-care)'
        required: true
        type: string
      practice_name:
        description: 'Practice Name (e.g., Advanced Spine Care)'
        required: true
        type: string
      deploy_all:
        description: 'Deploy all practices (ignores practice_id/name above)'
        required: false
        type: boolean
        default: false
  push:
    branches: [ main ]
    paths: [ 'src/lib/practice-config.ts' ]

jobs:
  deploy-single:
    if: ${{ github.event_name == 'workflow_dispatch' && !inputs.deploy_all }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy Fully Automated Railway Project
        run: |
          echo '🚀 Fully automated deployment for ${{ inputs.practice_name }} (${{ inputs.practice_id }})'
          
          # Create Railway project
          PROJECT_RESPONSE=$(curl -s --connect-timeout 30 --max-time 60 -X POST \
            -H "Authorization: Bearer ${{ secrets.RAILWAY_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"query":"mutation { projectCreate(input: { name: \"${{ inputs.practice_id }}-demo\" }) { id name } }"}' \
            https://backboard.railway.app/graphql/v2)
          
          echo "Project response: $PROJECT_RESPONSE"
          PROJECT_ID=$(echo "$PROJECT_RESPONSE" | jq -r '.data.projectCreate.id // empty')
          
          if [ -z "$PROJECT_ID" ]; then
            echo "❌ Failed to create project"
            exit 1
          fi
          
          echo "✅ Created project: $PROJECT_ID"
          
          # Create service with practice-specific name
          SERVICE_RESPONSE=$(curl -s --connect-timeout 30 --max-time 60 -X POST \
            -H "Authorization: Bearer ${{ secrets.RAILWAY_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"query\":\"mutation { serviceCreate(input: { projectId: \\\"$PROJECT_ID\\\", name: \\\"${{ inputs.practice_id }}-demo\\\" }) { id name } }\"}" \
            https://backboard.railway.app/graphql/v2)
          
          echo "Service response: $SERVICE_RESPONSE"
          SERVICE_ID=$(echo "$SERVICE_RESPONSE" | jq -r '.data.serviceCreate.id // empty')
          
          if [ -z "$SERVICE_ID" ]; then
            echo "❌ Failed to create service"
            exit 1
          fi
          
          echo "✅ Created service: $SERVICE_ID"
          
          # Connect GitHub repository
          CONNECT_RESPONSE=$(curl -s --connect-timeout 30 --max-time 60 -X POST \
            -H "Authorization: Bearer ${{ secrets.RAILWAY_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"query\":\"mutation { serviceConnect(id: \\\"$SERVICE_ID\\\", input: { repo: \\\"jomarcello/Agentsdemo\\\", branch: \\\"main\\\" }) { id } }\"}" \
            https://backboard.railway.app/graphql/v2)
          
          echo "Connect response: $CONNECT_RESPONSE"
          
          # Set PRACTICE_ID environment variable
          PRACTICE_VAR_RESPONSE=$(curl -s --connect-timeout 30 --max-time 60 -X POST \
            -H "Authorization: Bearer ${{ secrets.RAILWAY_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"query\":\"mutation { variableUpsert(input: { serviceId: \\\"$SERVICE_ID\\\", name: \\\"PRACTICE_ID\\\", value: \\\"${{ inputs.practice_id }}\\\" }) { id name value } }\"}" \
            https://backboard.railway.app/graphql/v2)
          
          echo "Practice variable response: $PRACTICE_VAR_RESPONSE"
          
          # Set NODE_ENV environment variable
          NODE_ENV_RESPONSE=$(curl -s --connect-timeout 30 --max-time 60 -X POST \
            -H "Authorization: Bearer ${{ secrets.RAILWAY_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"query\":\"mutation { variableUpsert(input: { serviceId: \\\"$SERVICE_ID\\\", name: \\\"NODE_ENV\\\", value: \\\"production\\\" }) { id name value } }\"}" \
            https://backboard.railway.app/graphql/v2)
          
          echo "Node env response: $NODE_ENV_RESPONSE"
          
          
          # Wait a moment for setup to complete
          sleep 10
          
          # Trigger deployment
          DEPLOY_RESPONSE=$(curl -s --connect-timeout 30 --max-time 60 -X POST \
            -H "Authorization: Bearer ${{ secrets.RAILWAY_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"query\":\"mutation { serviceInstanceDeploy(serviceId: \\\"$SERVICE_ID\\\", latestCommit: true) }\"}" \
            https://backboard.railway.app/graphql/v2)
          
          echo "Deploy response: $DEPLOY_RESPONSE"
          
          # Railway generates predictable URLs: {service-name}-{environment}.up.railway.app
          DEPLOYMENT_URL="https://${{ inputs.practice_id }}-demo-production.up.railway.app"
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          
          echo "✅ Fully automated deployment initiated!"
          echo "🔗 Project URL: https://railway.app/project/$PROJECT_ID"  
          echo "🌐 App URL: $DEPLOYMENT_URL"
          echo "⏳ Deployment will be ready in ~2-3 minutes"
          
          echo "✅ Deployment triggered successfully!"
          echo "📋 Project ID: $PROJECT_ID"
          echo "📋 Service ID: $SERVICE_ID"
          echo "🔗 Project URL: https://railway.app/project/$PROJECT_ID"
          echo ""
          echo "⚡ Auto-triggering domain generation workflow..."
          
          # Trigger domain generation workflow automatically (with timeout)
          curl --connect-timeout 30 --max-time 60 -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            -d "{\"ref\":\"main\",\"inputs\":{\"service_id\":\"$SERVICE_ID\",\"practice_name\":\"${{ inputs.practice_name }}\"}}" \
            "https://api.github.com/repos/jomarcello/Agentsdemo/actions/workflows/railway-domain-generator.yml/dispatches"
          
          if [ $? -eq 0 ]; then
            echo "✅ Domain generation workflow triggered successfully!"
            echo "🔗 Monitor at: https://github.com/jomarcello/Agentsdemo/actions"
          else
            echo "❌ Failed to trigger domain generation workflow"
            echo "💡 Trigger manually with Service ID: $SERVICE_ID"
          fi

      - name: Test deployment
        run: |
          echo "🧪 Testing deployment..."
          echo "Practice: ${{ inputs.practice_name }}"
          echo "URL: ${{ steps.deploy.outputs.deployment_url }}"
          echo "Status: ${{ steps.deploy.outputs.http_status }}"

  deploy-auto:
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if new practice was added
        id: check
        run: |
          echo "🔍 Checking if a new practice was added..."
          
          # Get the diff of practice-config.ts
          git fetch origin main
          DIFF_OUTPUT=$(git diff HEAD~1 HEAD -- src/lib/practice-config.ts)
          
          echo "Git diff output:"
          echo "$DIFF_OUTPUT"
          
          # Check if this is actually adding a new practice (not just comment changes)
          NEW_PRACTICE_ADDED=$(echo "$DIFF_OUTPUT" | grep "^+" | grep -E "'[a-z-]+(-[a-z]+)*':\s*{" | head -1)
          
          if [ -z "$NEW_PRACTICE_ADDED" ]; then
            echo "❌ No new practice detected - skipping deployment"
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "✅ New practice detected: $NEW_PRACTICE_ADDED"
          echo "should_deploy=true" >> $GITHUB_OUTPUT
          
          # Extract practice ID from added lines
          NEW_PRACTICE=$(echo "$NEW_PRACTICE_ADDED" | grep -o "'[a-z-]*':" | head -1 | sed "s/'//g" | sed "s/://g")
          
          if [ -z "$NEW_PRACTICE" ]; then
            # Fallback: check if rotterdam-wellness is in the diff
            if echo "$DIFF_OUTPUT" | grep -q "rotterdam-wellness"; then
              NEW_PRACTICE="rotterdam-wellness"
            else
              NEW_PRACTICE="advanced-spine-care"  # default fallback
            fi
          fi
          
          echo "🎯 Detected practice: $NEW_PRACTICE"
          echo "practice_id=$NEW_PRACTICE" >> $GITHUB_OUTPUT
          
          # Set practice name based on ID
          case $NEW_PRACTICE in
            "rotterdam-wellness")
              echo "practice_name=Rotterdam Wellness Center" >> $GITHUB_OUTPUT
              ;;
            "advanced-spine-care")
              echo "practice_name=Advanced Spine Care" >> $GITHUB_OUTPUT
              ;;
            "smith")
              echo "practice_name=Smith Chiropractic" >> $GITHUB_OUTPUT
              ;;
            "spinealign")
              echo "practice_name=SpineAlign Center" >> $GITHUB_OUTPUT
              ;;
            "smart-cosmetic")
              echo "practice_name=Smart Cosmetic Clinic" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "practice_name=Unknown Practice" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Deploy detected practice to Railway
        if: ${{ steps.check.outputs.should_deploy == 'true' }}
        run: |
          PRACTICE_ID="${{ steps.check.outputs.practice_id }}"
          PRACTICE_NAME="${{ steps.check.outputs.practice_name }}"
          
          echo "🚀 Auto-deploying $PRACTICE_NAME ($PRACTICE_ID)"
          
          # Create Railway project
          PROJECT_RESPONSE=$(curl -s --connect-timeout 30 --max-time 60 -X POST \
            -H "Authorization: Bearer ${{ secrets.RAILWAY_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"query\":\"mutation { projectCreate(input: { name: \\\"$PRACTICE_ID-demo\\\" }) { id name } }\"}" \
            https://backboard.railway.app/graphql/v2)
          
          echo "Project response: $PROJECT_RESPONSE"
          PROJECT_ID=$(echo "$PROJECT_RESPONSE" | jq -r '.data.projectCreate.id // empty')
          
          if [ -z "$PROJECT_ID" ]; then
            echo "❌ Failed to create project"
            exit 1
          fi
          
          echo "✅ Created project: $PROJECT_ID"
          
          # Create service
          SERVICE_RESPONSE=$(curl -s --connect-timeout 30 --max-time 60 -X POST \
            -H "Authorization: Bearer ${{ secrets.RAILWAY_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"query\":\"mutation { serviceCreate(input: { projectId: \\\"$PROJECT_ID\\\", name: \\\"$PRACTICE_ID-demo\\\" }) { id name } }\"}" \
            https://backboard.railway.app/graphql/v2)
          
          echo "Service response: $SERVICE_RESPONSE"
          SERVICE_ID=$(echo "$SERVICE_RESPONSE" | jq -r '.data.serviceCreate.id // empty')
          
          if [ -z "$SERVICE_ID" ]; then
            echo "❌ Failed to create service"
            exit 1
          fi
          
          echo "✅ Created service: $SERVICE_ID"
          
          # Connect GitHub repository
          CONNECT_RESPONSE=$(curl -s --connect-timeout 30 --max-time 60 -X POST \
            -H "Authorization: Bearer ${{ secrets.RAILWAY_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"query\":\"mutation { serviceConnect(id: \\\"$SERVICE_ID\\\", input: { repo: \\\"jomarcello/Agentsdemo\\\", branch: \\\"main\\\" }) { id } }\"}" \
            https://backboard.railway.app/graphql/v2)
          
          echo "Connect response: $CONNECT_RESPONSE"
          
          # Set PRACTICE_ID environment variable
          PRACTICE_VAR_RESPONSE=$(curl -s --connect-timeout 30 --max-time 60 -X POST \
            -H "Authorization: Bearer ${{ secrets.RAILWAY_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"query\":\"mutation { variableUpsert(input: { serviceId: \\\"$SERVICE_ID\\\", name: \\\"PRACTICE_ID\\\", value: \\\"$PRACTICE_ID\\\" }) { id name value } }\"}" \
            https://backboard.railway.app/graphql/v2)
          
          echo "Practice variable response: $PRACTICE_VAR_RESPONSE"
          
          # Set NODE_ENV environment variable
          NODE_ENV_RESPONSE=$(curl -s --connect-timeout 30 --max-time 60 -X POST \
            -H "Authorization: Bearer ${{ secrets.RAILWAY_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"query\":\"mutation { variableUpsert(input: { serviceId: \\\"$SERVICE_ID\\\", name: \\\"NODE_ENV\\\", value: \\\"production\\\" }) { id name value } }\"}" \
            https://backboard.railway.app/graphql/v2)
          
          echo "Node env response: $NODE_ENV_RESPONSE"
          
          # Wait for setup
          sleep 10
          
          # Trigger deployment
          DEPLOY_RESPONSE=$(curl -s --connect-timeout 30 --max-time 60 -X POST \
            -H "Authorization: Bearer ${{ secrets.RAILWAY_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"query\":\"mutation { serviceInstanceDeploy(serviceId: \\\"$SERVICE_ID\\\", latestCommit: true) }\"}" \
            https://backboard.railway.app/graphql/v2)
          
          echo "Deploy response: $DEPLOY_RESPONSE"
          
          DEPLOYMENT_URL="https://$PRACTICE_ID-demo-production.up.railway.app"
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          
          echo "✅ $PRACTICE_NAME deployment complete!"
          echo "🔗 Project URL: https://railway.app/project/$PROJECT_ID"  
          echo "🌐 App URL: $DEPLOYMENT_URL"
          
          # Auto-trigger domain generation workflow
          curl --connect-timeout 30 --max-time 60 -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            -d "{\"ref\":\"main\",\"inputs\":{\"service_id\":\"$SERVICE_ID\",\"practice_name\":\"$PRACTICE_NAME\"}}" \
            "https://api.github.com/repos/jomarcello/Agentsdemo/actions/workflows/railway-domain-generator.yml/dispatches"
          
          echo "✅ Domain generation workflow triggered!"

      - name: Skip deployment message
        if: ${{ steps.check.outputs.should_deploy == 'false' }}
        run: |
          echo "⏭️ Skipping deployment - no new practice detected"
          echo "ℹ️ Only deployments are triggered when new practices are added to practice-config.ts"
          echo "ℹ️ This prevents unnecessary redeployments of existing practices"

      - name: Test auto deployment
        if: ${{ steps.check.outputs.should_deploy == 'true' }}
        run: |
          echo "🧪 Testing auto deployment..."
          echo "Practice: ${{ steps.check.outputs.practice_name }}"
          echo "URL: https://${{ steps.check.outputs.practice_id }}-demo-production.up.railway.app"

  deploy-all:
    if: ${{ inputs.deploy_all }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        practice:
          - { id: 'spinealign', name: 'SpineAlign Center' }
          - { id: 'smith', name: 'Smith Chiropractic' }
          - { id: 'smart-cosmetic', name: 'Smart Cosmetic Clinic' }
          - { id: 'beautymed', name: 'BeautyMed Clinic' }
          - { id: 'advanced-spine-care', name: 'Advanced Spine Care' }
          - { id: '111-harley-street', name: '111 Harley Street' }
          - { id: '152-harley-street', name: '152 Harley Street' }
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy ${{ matrix.practice.name }}
        uses: docker://ghcr.io/railwayapp/cli:latest
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        with:
          entrypoint: sh
          args: |
            -c "
            echo '🚀 Deploying ${{ matrix.practice.name }} (${{ matrix.practice.id }})'
            
            # Install required tools
            apk add --no-cache jq curl
            
            # Initialize Railway project
            railway init -n '${{ matrix.practice.id }}-demo'
            
            # Set environment variables
            railway variables --set 'PRACTICE_ID=${{ matrix.practice.id }}'
            railway variables --set 'NODE_ENV=production'
            
            # Deploy
            railway up --detach
            
            # Get deployment URL
            DEPLOYMENT_URL=$(railway status --json | jq -r '.deployments[0].url // empty')
            if [ -z \"$DEPLOYMENT_URL\" ]; then
              DEPLOYMENT_URL=\"https://${{ matrix.practice.id }}-demo-production.up.railway.app\"
            fi
            
            echo \"✅ ${{ matrix.practice.name }} deployed: $DEPLOYMENT_URL\"
            
            # Test HTTP status
            sleep 30
            STATUS=$(curl -s -o /dev/null -w '%{http_code}' \"$DEPLOYMENT_URL\" || echo '000')
            echo \"🔍 ${{ matrix.practice.name }} Status: $STATUS\"
            "

  summary:
    if: ${{ inputs.deploy_all }}
    needs: deploy-all
    runs-on: ubuntu-latest
    steps:
      - name: Deployment Summary
        run: |
          echo "🎉 Mass deployment complete!"
          echo "Deployed practices:"
          echo "- SpineAlign Center: https://spinealign-demo-production.up.railway.app"
          echo "- Smith Chiropractic: https://smith-demo-production.up.railway.app"  
          echo "- Smart Cosmetic Clinic: https://smart-cosmetic-demo-production.up.railway.app"
          echo "- BeautyMed Clinic: https://beautymed-demo-production.up.railway.app"
          echo "- Advanced Spine Care: https://advanced-spine-care-demo-production.up.railway.app"
          echo "- 111 Harley Street: https://111-harley-street-demo-production.up.railway.app"
          echo "- 152 Harley Street: https://152-harley-street-demo-production.up.railway.app"